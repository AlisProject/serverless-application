version: 2.1

references:
  setup_remote_docker: &setup_remote_docker
    setup_remote_docker:
      version: 17.11.0-ce
  ignore_master: &ignore_master
    filters:
      branches:
        ignore:
          - master
  only_master: &only_master
    filters:
      branches:
        only:
          - master
  deploy_requirements: &deploy_requires
    requires:
      - lint
      - test_parallel1
      - test_parallel2
      - test_parallel3
      - test_parallel4
      - test_parallel5
      - packaging
  require_approval: &require_approval
    requires:
      - approval

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  slack: circleci/slack@3.2.0

executors:
  python3_6_1:
    working_directory: ~/repo
    docker:
      - image: circleci/python:3.6.1
  test:
    working_directory: ~/repo
    docker:
      - image: circleci/python:3.6.1
      - image: bluszcz/bflocalstack-dynamodb-s3
      - image: alismedia/dynamodb-local
        environment:
          MAX_HEAP_SIZE: 4096m
          HEAP_NEWSIZE: 3072m
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.2.0
        environment:
          discovery.type: single-node

commands:
  prepare-aws-cli:
    description: 'AWS CLIを準備'
    steps:
      - aws-cli/install
      - aws-cli/configure

  prepare-python-resources:
    description: 'Pythonのリソースを準備'
    parameters:
      resource:
        type: string
        default: 'requirements.txt'
    steps:
      - checkout

      - <<: *setup_remote_docker

      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "<< parameters.resource >>" }}
            - v3-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r << parameters.resource >>

      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "<< parameters.resource >>" }}

  deploy-resources:
    description: 'リソースのデプロイの共通処理'
    parameters:
      target:
        type: string
    steps:
      - prepare-python-resources

      - prepare-aws-cli

      - attach_workspace:
          at: .

      - deploy:
          name: Deployment
          command: |
            if [ $ALIS_APP_ID ]; then
              . venv/bin/activate
              ./deploy.sh << parameters.target >>
            fi

  prepare_test:
    description: 'テストの準備をする'
    steps:
      - checkout

      - <<: *setup_remote_docker

      - prepare-aws-cli

      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}
            - v3-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install -r requirements_test.txt

      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}

  run_tests:
    description: 'テストを実行する'
    parameters:
      options:
        type: string
    steps:
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python exec_test.py << parameters.options >>

jobs:
  lint:
    executor:
      name: python3_6_1

    steps:
      - prepare-python-resources:
          resource: 'requirements_test.txt'

      - run:
          name: checkstyle
          command: |
            . venv/bin/activate
            pycodestyle src tests ./*.py

      - run:
          name: pyflakes
          command: |
            . venv/bin/activate
            pyflakes src tests ./*.py

  # 本来は CircleCIの parallelism を使用したいがLabmdaのテストは少々特殊なため難しく、力技で並列化している
  # 効率的なワークフローとするため、個々のテストはpackagingの実行時間を下回ることを目標とする
  test_parallel1:
    executor:
      name: test

    steps:
      - prepare_test

      # 重めのテストは切り出して個別に実行するので、それ以外をすべて実行
      - run_tests:
          options: '--ignore /handlers/me/articles/public,/handlers/me/articles/drafts,/handlers/me/articles/purchase,/handlers/me/articles/comments,/handlers/articles,/handlers/me/comments,/handlers/search'

  test_parallel2:
    executor:
      name: test

    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/me/articles/public'

  test_parallel3:
    executor:
      name: test

    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/me/articles/drafts'

  test_parallel4:
    executor:
      name: test

    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/me/articles/comments'
      - run_tests:
          options: '--target /handlers/me/articles/purchase'

  test_parallel5:
    executor:
      name: test

    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/articles'
      - run_tests:
          options: '--target /handlers/me/comments'
      - run_tests:
          options: '--target /handlers/search'

  packaging:
    executor:
      name: python3_6_1

    steps:
      - prepare-python-resources

      - run:
          name: make deploy package
          command: |
            . venv/bin/activate
            ./packaging.sh

      - persist_to_workspace:
          root: .
          paths:
            - deploy/*

  deploy-function:
    executor:
      name: python3_6_1

    steps:
      - deploy-resources:
          target: 'function'

  deploy-function02:
    executor:
      name: python3_6_1

    steps:
      - deploy-resources:
          target: 'function02'

  deploy-api:
    executor:
      name: python3_6_1

    steps:
      - deploy-resources:
          target: 'api'

  deploy-permission:
    executor:
      name: python3_6_1

    steps:
      - deploy-resources:
          target: 'permission'

  labo:
    docker:
      - image: circleci/node:12.4.0

    working_directory: ~/repo

    steps:
      - checkout

      - attach_workspace:
          at: .

      - restore_cache:
          keys:
            - v1-npm-dependencies-{{ checksum "package-lock.json" }}
            - v1-npm-dependencies-

      - run:
          command: npm i

      - save_cache:
          paths:
            - ./node_modules
          key: v1-npm-dependencies-{{ checksum "package-lock.json" }}

      - deploy:
          name: Deployment
          command: |
            if [ $ALIS_APP_ID ]; then
              npm run deploy
            fi

  notify-to-slack-for-approval:
    executor:
      name: python3_6_1

    steps:
      - slack/approval:
          message: "本番環境へのデプロイを承認してください"
          color: "#F5E911"

  bulk-deployment-to-production:
    executor:
      name: python3_6_1

    steps:
      - prepare-python-resources

      - attach_workspace:
          at: .

      - aws-cli/install

      - aws-cli/configure

      - deploy:
          name: Bulk deployment
          command: |
            . venv/bin/activate
            ./deploy_api.sh
            ./fix_api.sh

  fix-api:
    executor:
      name: python3_6_1

    steps:
      - prepare-python-resources

      - attach_workspace:
          at: .

      - prepare-aws-cli

      - deploy:
          name: Fix API via script.
          command: |
            . venv/bin/activate
            ./fix_api.sh


workflows:
  # CloudFormationスタックの依存関係に即したワークフロー
  build-deploy:
    jobs:
      - lint
      - test_parallel1
      - test_parallel2
      - test_parallel3
      - test_parallel4
      - test_parallel5
      - packaging

      # ステージング環境(本番環境以外)のワークフロー
      - labo:
          <<: *ignore_master
          <<: *deploy_requires
      - deploy-function:
          <<: *ignore_master
          <<: *deploy_requires
      - deploy-function02:
          <<: *ignore_master
          <<: *deploy_requires
      - deploy-api:
          <<: *ignore_master
          requires:
            - deploy-function
            - deploy-function02
      - deploy-permission:
          <<: *ignore_master
          requires:
            - deploy-api
      - fix-api:
          <<: *ignore_master
          requires:
            - deploy-permission

      # 本番環境のワークフロー
      - notify-to-slack-for-approval:
          <<: *deploy_requires
          <<: *only_master
          context: slack_notification
      - approval:
          <<: *deploy_requires
          <<: *only_master
          type: approval
      - bulk-deployment-to-production:
          <<: *only_master
          context: serverless_production
          <<: *require_approval
      - labo:
          <<: *only_master
          context: serverless_production
          <<: *require_approval
      - deploy-function:
          <<: *only_master
          context: serverless_production
          <<: *require_approval
      - deploy-function02:
          <<: *only_master
          context: serverless_production
          <<: *require_approval
      - deploy-api:
          <<: *only_master
          requires:
            - deploy-function
            - deploy-function02
      - deploy-permission:
          <<: *only_master
          requires:
            - deploy-api
      - fix-api:
          <<: *only_master
          requires:
            - deploy-permission
