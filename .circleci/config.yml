version: 2.1

references:
  setup_remote_docker: &setup_remote_docker
    setup_remote_docker:
      version: 20.10.14
  docker_hub_authentication: &docker_hub_authentication
    auth:
      username: $DOCKERHUB_USER
      password: $DOCKERHUB_PASSWORD
  ignore_master: &ignore_master
    filters:
      branches:
        ignore:
          - master
  only_master: &only_master
    filters:
      branches:
        only:
          - master
  deploy_requirements: &deploy_requires
    requires:
      - lint
      - test_parallel1
      - test_parallel2
      - test_parallel3
      - test_parallel4
      - test_parallel5
      - packaging
  require_approval: &require_approval_and_packaging
    requires:
      - approval
      - packaging
  other_env_steps: &other_env_steps
    <<: *ignore_master
    # AlisProjectアカウントでもビルドは実行されるため、Contextはserverless_stagingを使用している
    # フォークしたリポジトリで作業する際は、同名のContextを各自の環境に設定する必要がある
    context:
      - serverless_staging
      - docker-hub-credencials
  staging_steps: &staging_steps
    <<: *only_master
    context:
      - serverless_staging
      - docker-hub-credencials
  production_steps: &production_steps
    <<: *only_master
    context:
      - serverless_production
      - docker-hub-credencials

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  slack: circleci/slack@3.3.0
  jira: circleci/jira@1.0.5

executors:
  python3_9_13:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.9.13
        <<: *docker_hub_authentication
  test:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.9.13
        <<: *docker_hub_authentication
      - image: bluszcz/bflocalstack-dynamodb-s3
        <<: *docker_hub_authentication
      - image: alismedia/dynamodb-local
        <<: *docker_hub_authentication
        environment:
          MAX_HEAP_SIZE: 4096m
          HEAP_NEWSIZE: 3072m
      # Docker Hubではないので認証情報不要
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.2.0
        environment:
          discovery.type: single-node

commands:
  prepare-aws-cli:
    description: 'AWS CLIを準備'
    steps:
      - aws-cli/install
      - aws-cli/configure

  prepare-python-resources:
    description: 'Pythonのリソースを準備'
    parameters:
      resource:
        type: string
        default: 'requirements.txt'
    steps:
      - checkout

      - <<: *setup_remote_docker

      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "<< parameters.resource >>" }}
            - v4-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r << parameters.resource >>

      - save_cache:
          paths:
            - ./venv
          key: v4-dependencies-{{ checksum "<< parameters.resource >>" }}

  deploy-resources:
    description: 'リソースのデプロイの共通処理'
    parameters:
      target:
        type: string
    steps:
      - prepare-python-resources

      - prepare-aws-cli

      - attach_workspace:
          at: .

      - deploy:
          name: 'Deployment'
          command: |
            # masterブランチであるか、フォークした環境であればデプロイを行う
            if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_PROJECT_USERNAME != 'AlisProject' ]; then
              . venv/bin/activate
              ./deploy.sh << parameters.target >>
            fi

  prepare_test:
    description: 'テストの準備をする'
    steps:
      - checkout

      - <<: *setup_remote_docker

      - prepare-aws-cli

      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}
            - v4-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install -r requirements_test.txt

      - save_cache:
          paths:
            - ./venv
          key: v4-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}

  run_tests:
    description: 'テストを実行する'
    parameters:
      options:
        type: string
    steps:
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python exec_test.py << parameters.options >>

jobs:
  lint:
    executor: python3_9_13
    steps:
      - prepare-python-resources:
          resource: 'requirements_test.txt'

      - run:
          name: checkstyle
          command: |
            . venv/bin/activate
            pycodestyle src tests ./*.py

      - run:
          name: pyflakes
          command: |
            . venv/bin/activate
            pyflakes src tests ./*.py

  # 本来は CircleCIの parallelism を使用したいがLambdaのテストは少々特殊なため難しく、力技で並列化している
  # 効率的なワークフローとするため、個々のテストはpackagingの実行時間を下回ることを目標とする
  test_parallel1:
    executor: test
    steps:
      - prepare_test

      # 重めのテストは切り出して個別に実行するので、それ以外をすべて実行
      - run_tests:
          options: '--ignore /handlers/me/articles/public,/handlers/me/articles/drafts,/handlers/me/articles/purchase,/handlers/me/articles/comments,/handlers/articles,/handlers/me/comments,/handlers/search'

  test_parallel2:
    executor: test
    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/me/articles/public'

  test_parallel3:
    executor: test
    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/me/articles/drafts'

  test_parallel4:
    executor: test
    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/me/articles/comments'
      - run_tests:
          options: '--target /handlers/me/articles/purchase'

  test_parallel5:
    executor: test
    steps:
      - prepare_test
      - run_tests:
          options: '--target /handlers/articles'
      - run_tests:
          options: '--target /handlers/me/comments'
      - run_tests:
          options: '--target /handlers/search'

  packaging:
    executor: python3_9_13
    steps:
      - prepare-python-resources

      - run:
          name: make deploy package
          command: |
            . venv/bin/activate
            ./packaging.sh

      - persist_to_workspace:
          root: .
          paths:
            - deploy/*

  deploy-function:
    executor: python3_9_13
    steps:
      - deploy-resources:
          target: 'function'

  deploy-function02:
    executor: python3_9_13
    steps:
      - deploy-resources:
          target: 'function02'

  deploy-api:
    executor: python3_9_13
    steps:
      - deploy-resources:
          target: 'api'

  deploy-permission:
    executor: python3_9_13
    steps:
      - deploy-resources:
          target: 'permission'

  deploy-alarms:
    executor: python3_9_13
    steps:
      - deploy-resources:
          target: 'apialarms'

  fix-api:
    executor: python3_9_13
    steps:
      - prepare-python-resources

      - attach_workspace:
          at: .

      - prepare-aws-cli

      - deploy:
          name: Fix API via script.
          command: |
            . venv/bin/activate
            ./fix_api.sh
            ./fix_configurations.sh

  notify-to-slack-for-approval:
    executor: python3_9_13
    steps:
      - slack/approval:
          message: "本番環境へのデプロイを承認してください"
          color: "#F5E911"


# CloudFormationスタックの依存関係に即したワークフローとなっている
workflows:
  # masterブランチ以外への更新で実行される、その他環境用ビルド
  # デプロイが実行されるのはフォークした環境のみ
  other-env-build:
    jobs:
      - lint:
          <<: *other_env_steps
      - test_parallel1:
          <<: *other_env_steps
      - test_parallel2:
          <<: *other_env_steps
      - test_parallel3:
          <<: *other_env_steps
      - test_parallel4:
          <<: *other_env_steps
      - test_parallel5:
          <<: *other_env_steps
      - packaging:
          <<: *other_env_steps

      - deploy-function:
          <<: *other_env_steps
          <<: *deploy_requires

      - deploy-function02:
          <<: *other_env_steps
          requires:
            - deploy-function

      - deploy-api:
          <<: *other_env_steps
          requires:
            - deploy-function02

      - deploy-permission:
          <<: *other_env_steps
          requires: &require-api-other-env
            - deploy-api
      - fix-api:
          <<: *other_env_steps
          requires: *require-api-other-env

  # ステージング環境
  staging:
    jobs:
      - lint:
          <<: *staging_steps
      - test_parallel1:
          <<: *staging_steps
      - test_parallel2:
          <<: *staging_steps
      - test_parallel3:
          <<: *staging_steps
      - test_parallel4:
          <<: *staging_steps
      - test_parallel5:
          <<: *staging_steps
      - packaging:
          <<: *staging_steps

      - deploy-function:
          <<: *staging_steps
          <<: *deploy_requires

      - deploy-function02:
          <<: *staging_steps
          requires:
            - deploy-function

      - deploy-api:
          <<: *staging_steps
          requires:
            - deploy-function02

      - deploy-permission:
          <<: *staging_steps
          requires: &require-api-staging
            - deploy-api
      - deploy-alarms:
          <<: *staging_steps
          requires: *require-api-staging
      - fix-api:
          <<: *staging_steps
          requires: *require-api-staging
          post-steps:
            - jira/notify

  # 本番環境(テスト等無し・承認付き)
  production:
    jobs:
      # stagingで同時にテストを行っているため本番環境ワークフローではテストを行わない
      - packaging:
          <<: *production_steps
      - notify-to-slack-for-approval:
          <<: *only_master
          context: slack_notification
      - approval:
          <<: *production_steps
          type: approval

      - deploy-function:
          <<: *production_steps
          <<: *require_approval_and_packaging

      - deploy-function02:
          <<: *production_steps
          requires:
            - deploy-function

      - deploy-api:
          <<: *production_steps
          requires:
            - deploy-function02

      - deploy-permission:
          <<: *production_steps
          requires: &require-api-production
            - deploy-api
      - deploy-alarms:
          <<: *production_steps
          requires: *require-api-production
      - fix-api:
          <<: *production_steps
          requires: *require-api-production
