swagger: "2.0"
info:
  title:
    Ref: "AWS::StackName"
  version: 1.0.0
basePath: /
schemes:
  - https
definitions:
  ArticleInfo:
    type: object
    properties:
      article_id:
        type: string
      user_id:
        type: string
      title:
        type: string
      overview:
        type: string
      eye_catch_url:
        type: string
      created_at:
        type: integer
  ArticleContent:
    type: object
    properties:
      article_id:
        type: string
      user_id:
        type: string
      title:
        type: string
      overview:
        type: string
      eye_catch_url:
        type: string
      body:
        type: string
      created_at:
        type: integer
  MeArticlesDraftsCreate:
    type: object
    properties:
      title:
        type: string
      body:
        type: string
      eye_catch_url:
        type: string
      overview:
        type: string
  MeArticlesDraftsTitleUpdate:
    type: object
    properties:
      title:
        type: string
  MeArticlesPublicTitleUpdate:
    type: object
    properties:
      title:
        type: string
  MeArticlesDraftsBodyUpdate:
    type: object
    properties:
      body:
        type: string
  MeArticlesPublicBodyUpdate:
    type: object
    properties:
      body:
        type: string
  MeInfoUpdate:
    type: object
    properties:
      user_display_name:
        type: string
      self_introduction:
        type: string
  MeInfoIcon:
    type: object
    properties:
      icon_image:
        type: string
  ArticleImage:
    type: object
    properties:
      article_image:
        type: string
  UserInfo:
    type: object
    properties:
      user_id:
        type: string
      user_display_name:
        type: string
      icon_image_url:
        type: string
      self_introduction:
        type: string
  UpdateArticle:
    type: object
    properties:
      title:
        type: string
      body:
        type: string
      eye_catch_url:
        type: string
      overview:
        type: string
  MeWalletBalance:
    type: object
    properties:
      private_eth_address:
        type: string
  MeWalletTip:
    type: object
    properties:
      article_id:
        type: string
      tip_value:
        type: string
  MeExternalProviderUserCreate:
    type: object
    properties:
      user_id:
        type: string
  SignUpLineAuthorizeUrl:
    type: object
    properties:
      callback_url:
        type: string
  LoginLineAuthorizeUrl:
    type: object
    properties:
      callback_url:
        type: string
  LoginLineAuthorizeRequest:
    type: object
    properties:
      accessToken:
        type: string
      lastAuthUser:
        type: string
      idToken:
        type: string
      refreshToken:
        type: string
      hasUserId:
        type: boolean
  Notification:
    type: object
    properties:
      user_id:
        type: string
      sort_key:
        type: integer
      type:
        type: string
      acted_user_id:
        type: string
      created_at:
        type: integer
  Comment:
    type: object
    properties:
      comment_id:
        type: string
      article_id:
        type: string
      sort_key:
        type: integer
      user_id:
        type: string
      text:
        type: string
      created_at:
        type: integer
  Topic:
    type: object
    properties:
      name:
        type: string
      display_name:
        type: string
      order:
        type: integer
      index_hash_key:
        type: string
  Publish:
    type: object
    properties:
      topic:
        type: string
      tags:
        type: array
        items:
          type: string
  PublishWithHeader:
    type: object
    properties:
      topic:
        type: string
      tags:
        type: array
        items:
          type: string
      eye_catch_url:
        type: string
  Tag:
    type: object
    properties:
      name:
        type: string
      name_with_analyzer:
        type: string
      count:
        type: integer
      created_at:
        type: integer
  Fraud:
    type: object
    properties:
      reason:
        type: 'string'
        enum:
        - 'illegal_act'
        - 'anything_contrary_to_public_order'
        - 'nuisance'
        - 'copyright_violation'
        - 'slander'
        - 'illegal_token_usage'
        - 'other'
      origin_url:
        type: 'string'
      free_text:
        type: 'string'
  DistributedTokens:
    type: object
    properties:
      article:
        type: integer
      like:
        type: integer
      tip:
        type: integer
      bonus:
        type: integer
  ApplicationCreate:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      application_type:
        type: string
        enum:
          - 'WEB'
          - 'NATIVE'
      redirect_urls:
        type: array
        items:
          type: string
  ApplicationUpdate:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      redirect_urls:
        type: array
        items:
          type: string
  AuthleteClient:
    type: object
    properties:
      applicationType:
        type: string
        enum:
          - 'WEB'
          - 'NATIVE'
      clientId:
        type: integer
      authTimeRequired:
        type: boolean
      clientIdAliasEnabled:
        type: boolean
      clientName:
        type: string
      clientSecret:
        type: string
      createdAt:
        type: integer
      defaultMaxAge:
        type: integer
      description:
        type: string
      developer:
        type: string
      idTokenSignAlg:
        type: string
      modifiedAt:
        type: integer
      number:
        type: integer
      redirect_urls:
        type: array
        items:
          type: string
      subjectType:
        type: string
      tlsClientCertificateBoundAccessTokens:
        type: boolean
      tokenAuthMethod:
        type: string
paths:
  /search/articles:
    get:
      description: "記事検索"
      parameters:
      - name: "query"
        in: "query"
        description: "検索ワード(tag, queryいずれかは必須)"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "取得件数"
        required: false
        type: "integer"
        minimum: 1
      - name: "page"
        in: "query"
        description: "ページ"
        required: false
        type: "integer"
      - name: "tag"
        in: "query"
        description: "検索タグ(tag, queryいずれかは必須)"
        required: false
        type: "integer"
      responses:
        "200":
          description: "検索記事一覧"
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ElasticSearchSearchArticles.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /search/users:
    get:
      description: "ユーザー検索"
      parameters:
      - name: "query"
        in: "query"
        description: "検索ワード"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "取得件数"
        required: false
        type: "integer"
        minimum: 1
      - name: "page"
        in: "query"
        description: "ページ"
        required: false
        type: "integer"
      responses:
        "200":
          description: "検索ユーザー一覧"
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ElasticSearchSearchUsers.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /search/tags:
    get:
      description: "タグ検索"
      parameters:
      - name: "query"
        in: "query"
        description: "検索ワード"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "取得件数"
        required: false
        type: "integer"
        minimum: 1
      - name: "page"
        in: "query"
        description: "ページ"
        required: false
        type: "integer"
      responses:
        "200":
          description: "タグ一覧"
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ElasticSearchSearchTags.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/recent:
    get:
      description: "最新記事一覧情報を取得"
      parameters:
      - name: "limit"
        in: "query"
        description: "取得件数"
        required: false
        type: "integer"
        minimum: 1
      - name: "topic"
        in: "query"
        description: "トピック"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "ページ数"
        required: false
        type: "integer"
      responses:
        "200":
          description: "最新記事一覧"
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesRecent.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/popular:
    get:
      description: '人気記事一覧情報を取得'
      parameters:
      - name: 'limit'
        in: 'query'
        description: '取得件数'
        required: false
        type: 'integer'
        minimum: 1
      - name: 'page'
        in: 'query'
        description: '取得対象ページのoffset'
        required: false
        type: 'integer'
        minimum: 1
      - name: 'topic'
        in: 'query'
        description: '検索対象のトピック名'
        required: false
        type: 'string'
      responses:
        '200':
          description: '人気記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesPopular.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/tip_ranking:
    get:
      description: '投げ銭ランキングの記事一覧を取得する'
      parameters:
        - name: 'limit'
          in: 'query'
          description: '取得件数'
          required: false
          type: 'integer'
          minimum: 1
        - name: 'page'
          in: 'query'
          description: '取得対象ページのoffset'
          required: false
          type: 'integer'
          minimum: 1
        - name: 'topic'
          in: 'query'
          description: '検索対象のトピック名'
          required: false
          type: 'string'
      responses:
        '200':
          description: '投げ銭ランキングの記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-ArticlesTipRanking"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/eyecatch:
    get:
      description: 'アイキャッチ記事一覧情報を取得'
      responses:
        '200':
          description: 'アイキャッチ記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesEyecatch.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/recommended:
    get:
      description: 'オススメ記事一覧情報を取得'
      parameters:
      - name: 'limit'
        in: 'query'
        description: '取得件数'
        required: false
        type: 'integer'
        minimum: 1
      - name: 'page'
        in: 'query'
        description: '取得対象ページのoffset'
        required: false
        type: 'integer'
        minimum: 1
      responses:
        '200':
          description: 'オススメ記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesRecommended.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/{article_id}:
    get:
      description: "指定されたarticle_idの記事情報を取得"
      parameters:
      - name: "article_id"
        in: "path"
        description: "対象記事の指定するために使用"
        required: true
        type: "string"
      responses:
        "200":
          description: "記事内容取得"
          schema:
            $ref: '#/definitions/ArticleContent'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/{article_id}/alistoken:
    get:
      description: "指定された article_id のALISトークン数を取得"
      parameters:
      - name: "article_id"
        in: "path"
        description: "対象記事の指定するために使用"
        required: true
        type: "string"
      responses:
        "200":
          description: "ALISトークン数"
          schema:
            type: object
            properties:
              alistoken:
                type: "number"
                format: "double"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesAlisTokensShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/{article_id}/likes:
    get:
      description: '指定された article_id の記事の「いいね」数を取得'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '対象記事の「いいね」数'
          schema:
            type: object
            properties:
              count:
                type: "number"
                format: "double"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesLikesShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/{article_id}/comments:
    get:
      description: '指定された article_id の記事のコメントの一覧を取得する'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '対象記事のコメントの一覧'
          schema:
            $ref: '#/definitions/Comment'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesCommentsIndex.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /comments/{comment_id}/likes:
    get:
      description: '指定されたコメントに付与されているいいね数を取得する'
      parameters:
      - name: 'comment_id'
        in: 'path'
        description: '対象コメントを指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '対象記事のコメントの一覧'
          schema:
            type: object
            properties:
              count:
                type: "number"
                format: "double"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommentsLikesShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/twitter:
    post:
      description: "Twitterログインの実施"
      parameters:
      - name: request
        in: body
        required: true
        schema:
          type: object
          required:
          - oauth_token
          - oauth_verifier
          properties:
            oauth_token:
              type: string
            oauth_verifier:
              type: string
      responses:
        "200":
          description: "アクセストークンを取得"
          schema:
            type: object
            properties:
              access_token:
                type: string
              refresh_token:
                type: string
              id_token:
                type: string
              has_user_id:
                type: string
        "401":
          description: "認証エラー"
          schema:
            type: object
            properties:
              message:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginTwitter.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/twitter/authorization_url:
    get:
      description: "Twitter認証画面のURLを取得する"
      responses:
        "200":
          description: "Twitter認証画面のURL"
          schema:
            type: object
            properties:
              url:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginTwitterAuthorizationUrl.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /sign_up/line/authorization_url:
    get:
      description: 'LINEサインアップ用URL返却のAPI'
      responses:
        '200':
          description: 'LINEサインアップ用URL'
          schema:
            type: object
            properties:
              callback_url:
                type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUpLineAuthorizeUrl.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/line/authorization_url:
    get:
      description: 'LINEログイン用URL返却のAPI'
      responses:
        '200':
          description: 'LINEログイン用URL'
          schema:
            type: object
            properties:
              callback_url:
                type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginLineAuthorizeUrl.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/line:
    post:
      description: 'LINEログインユーザーを作成'
      responses:
        '200':
          description: '認証用codeの受け渡し'
          schema:
            type: object
            properties:
              code:
                type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginLineAuthorizeRequest.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/yahoo:
    post:
      description: "Yahooログインの実施"
      parameters:
      - name: request
        in: body
        required: true
        schema:
          type: object
          required:
          - code
          - state
          properties:
            code:
              type: string
            state:
              type: string
      responses:
        "200":
          description: "アクセストークンを取得"
          schema:
            type: object
            properties:
              access_token:
                type: string
              refresh_token:
                type: string
              id_token:
                type: string
              has_user_id:
                type: string
        "401":
          description: "認証エラー"
          schema:
            type: object
            properties:
              message:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-LoginYahoo"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/yahoo/authorization_url:
    get:
      description: "Yahoo認証画面のURLを取得する"
      responses:
        "200":
          description: "Yahoo認証画面のURL"
          schema:
            type: object
            properties:
              url:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-LoginYahooAuthorizationUrl"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/facebook:
    post:
      description: "Facebookログインの実施"
      parameters:
      - name: request
        in: body
        required: true
        schema:
          type: object
          required:
          - code
          - state
          properties:
            code:
              type: string
            state:
              type: string
      responses:
        "200":
          description: "アクセストークンを取得"
          schema:
            type: object
            properties:
              access_token:
                type: string
              refresh_token:
                type: string
              id_token:
                type: string
              has_user_id:
                type: string
        "401":
          description: "認証エラー"
          schema:
            type: object
            properties:
              message:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-LoginFacebook"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /login/facebook/authorization_url:
    get:
      description: "Facebook認証画面のURLを取得する"
      responses:
        "200":
          description: "Facebook認証画面のURL"
          schema:
            type: object
            properties:
              url:
                type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-LoginFacebookAuthorizationUrl"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/drafts:
    get:
      description: '下書き記事一覧情報を取得'
      parameters:
      - name: 'limit'
        in: 'query'
        description: '取得件数'
        required: false
        type: 'integer'
        minimum: 1
      - name: 'article_id'
        in: 'query'
        description: 'ページング処理における、現在のページの最後の記事のID'
        required: false
        type: 'string'
      - name: 'sort_key'
        in: 'query'
        description: 'ページング処理における、現在のページの最後の記事のソートキー'
        required: false
        type: 'integer'
        minimum: 1
      responses:
        '200':
          description: '下書き記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsIndex.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    post:
      description: '下書き記事を作成'
      parameters:
      - name: 'article'
        in: 'body'
        description: 'article object'
        required: true
        schema:
          $ref: '#/definitions/MeArticlesDraftsCreate'
      responses:
        '200':
          description: '作成された記事ID'
          schema:
            type: object
            properties:
              article_id:
                type: 'string'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/drafts/article_id:
    post:
      description: 'article_idを作成'
      responses:
        '200':
          description: '作成された記事ID'
          schema:
            type: object
            properties:
              article_id:
                type: 'string'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsArticleIdCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/drafts/publish:
    put:
      description: "指定された article_id の下書き記事を公開"
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      - name: 'publish'
        in: 'body'
        description: 'publish object'
        required: true
        schema:
          $ref: '#/definitions/Publish'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsPublish.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy

  /me/articles/{article_id}/drafts/publish_with_header:
    put:
      description: "指定された article_id の下書き記事を公開"
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      - name: 'publish'
        in: 'body'
        description: 'publish object'
        required: true
        schema:
          $ref: '#/definitions/PublishWithHeader'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsPublishWithHeader.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/public:
    get:
      description: '公開記事一覧情報を取得'
      parameters:
      - name: 'limit'
        in: 'query'
        description: '取得件数'
        required: false
        type: 'integer'
        minimum: 1
      - name: 'article_id'
        in: 'query'
        description: 'ページング処理における、現在のページの最後の記事のID'
        required: false
        type: 'string'
      - name: 'sort_key'
        in: 'query'
        description: 'ページング処理における、現在のページの最後の記事のソートキー'
        required: false
        type: 'integer'
        minimum: 1
      responses:
        '200':
          description: '公開記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicIndex.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/public:
    get:
      description: '指定された article_id の公開記事情報を取得'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '記事内容取得'
          schema:
            $ref: '#/definitions/ArticleContent'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      description: '指定された article_id の編集記事情報を上書き'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      - name: 'article'
        in: 'body'
        description: 'article object'
        required: true
        schema:
          $ref: '#/definitions/UpdateArticle'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/public/edit:
    get:
      description: '指定された article_id の編集記事情報を取得'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '記事内容取得'
          schema:
            $ref: '#/definitions/ArticleContent'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicEdit.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/public/unpublish:
    put:
      description: '指定された article_id の公開記事を下書きに戻す'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicUnpublish.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/public/republish:
    put:
      description: '指定された article_id の編集記事を公開する'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      - name: 'publish'
        in: 'body'
        description: 'publish object'
        required: true
        schema:
          $ref: '#/definitions/Publish'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicRepublish.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/public/republish_with_header:
    put:
      description: '指定された article_id の編集記事を公開する'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      - name: 'publish'
        in: 'body'
        description: 'publish object'
        required: true
        schema:
          $ref: '#/definitions/PublishWithHeader'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicRepublishWithHeader.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/like:
    get:
      description: '指定された article_id の記事に「いいね」を行ったかを確認'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '対象記事に「いいね」を行ったかを判定'
          schema:
            type: object
            properties:
              liked:
                type: boolean
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesLikesShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    post:
      description: '対象記事に「いいね」を行う'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '「いいね」の実施成功'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesLikeCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/comments:
    post:
      description: '指定された article_id の記事に対してコメントを登録する'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'コメント登録の完了'
          schema:
            type: object
            properties:
              comment_id:
                type: 'string'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesCommentsCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/comments/reply:
    post:
      description: '指定された article_id の記事に対してコメントの返信を登録する'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      - name: 'text'
        in: 'body'
        description: 'コメントの内容'
        required: true
        type: 'string'
      - name: 'parent_id'
        in: 'body'
        description: '返信するスレッドの親コメントのid'
        required: true
        type: 'string'
      - name: 'replyed_user_id'
        in: 'body'
        description: '返信先のユーザーのid'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'コメント登録の完了'
          schema:
            type: object
            properties:
              comment_id:
                type: 'string'
      security:
      - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesCommentsReply.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/comments/likes:
    get:
      description: '指定された記事のコメントの中で、自分がいいねを実行したコメントのIDの一覧を取得する'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'いいねを実施したコメントのIDの一覧'
          schema:
            type: object
            properties:
              comment_ids:
                type: array
                items:
                  type: 'string'
                  enum:
                    - "comment_id"
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesCommentsLikesIndex.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/comments/{comment_id}:
    delete:
      description: '指定されたコメントを削除する'
      parameters:
      - name: 'comment_id'
        in: 'path'
        description: '対象コメントを指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'コメント削除の完了'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeCommentsDelete.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/comments/{comment_id}/likes:
    post:
      description: '指定されたコメントに対していいねする'
      parameters:
      - name: 'comment_id'
        in: 'path'
        description: '対象コメントを指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'いいねの完了'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeCommentsLikesCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/fraud:
    post:
      description: '対象記事に不正報告を行う'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      - name: 'Fraud'
        in: 'body'
        required: true
        schema:
          $ref: '#/definitions/Fraud'
      responses:
        '200':
          description: '不正報告の実施成功'
          in: 'body'
          required: true
          schema:
            $ref: '#/definitions/Fraud'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesFraudCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/images:
    post:
      description: '対象記事に画像データを登録'
      produces:
      - application/json
        application/octet-stream
      parameters:
        - name: 'content-type'
          in: 'header'
          required: true
          type: 'string'
        - name: 'article_id'
          description: '対象記事の指定するために使用'
          in: 'path'
          required: true
          type: 'string'
        - in: 'body'
          name: 'ArticleImage'
          description: 'article image object'
          required: true
          schema:
            $ref: '#/definitions/ArticleImage'
      responses:
        '200':
          description: '登録した画像データのURL'
          schema:
            type: object
            properties:
              image_url:
                type: 'string'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesImagesCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/image_upload_url:
    get:
      description: '対象記事に画像データをアップロードできるURLを取得'
      parameters:
      - name: 'article_id'
        description: '対象記事の指定するために使用'
        in: 'path'
        required: true
        type: 'string'
      - name: 'upload_image_size'
        in: 'query'
        description: '対象画像のサイズ(byte)'
        required: true
        type: 'integer'
      - name: 'upload_image_extension'
        in: 'query'
        description: '対象画像の拡張子'
        required: true
        schema:
          type: 'string'
          enum:
          - 'gif'
          - 'jpg'
          - 'jpeg'
          - 'png'
      responses:
        '200':
          description: 'アップロード用のURL'
          schema:
            type: object
            properties:
              url:
                type: 'string'
      security:
      - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesImageUploadUrlShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/info:
    get:
      description: 'ログインユーザ情報を取得'
      responses:
        '200':
          description: 'ログインユーザ情報'
          schema:
            $ref: '#/definitions/UserInfo'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeInfoShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      description: 'ユーザ情報を更新'
      parameters:
      - name: 'user info'
        in: 'body'
        description: 'user info object'
        required: true
        schema:
          $ref: '#/definitions/MeInfoUpdate'
      responses:
        '200':
          description: 'ユーザ情報更新成功'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeInfoUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/info/icon:
    post:
      description: 'ユーザアイコンを登録'
      produces:
      - application/json
        application/octet-stream
      parameters:
        - name: 'icon'
          in: 'body'
          description: 'icon object'
          required: true
          schema:
            $ref: '#/definitions/MeInfoIcon'
      responses:
        '200':
          description: '登録した画像データのURL'
          schema:
            type: object
            properties:
              image_url:
                type: 'string'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeInfoIconCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/info/first_experiences:
    put:
      description: 'ユーザーのALIS上での初体験を登録する'
      parameters:
      - name: 'user_first_experience'
        in: 'body'
        description: '登録するユーザーの体験情報'
        required: true
        schema:
          type: 'string'
          enum:
          - 'is_liked_article'
          - 'is_tipped_article'
          - 'is_got_token'
          - 'is_created_article'
      responses:
        '200':
          description: 'ユーザ情報更新成功'
      security:
      - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeInfoFirstExperiencesUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/articles/public:
    get:
      description: '指定されたユーザーの公開記事一覧情報を取得'
      parameters:
      - name: 'user_id'
        in: 'path'
        description: '対象ユーザを指定するために使用'
        required: true
        type: 'string'
      - name: 'limit'
        in: 'query'
        description: '取得件数'
        required: false
        type: 'integer'
        minimum: 1
      - name: 'article_id'
        in: 'query'
        description: 'ページング処理における、現在のページの最後の記事のID'
        required: false
        type: 'string'
      - name: 'sort_key'
        in: 'query'
        description: 'ページング処理における、現在のページの最後の記事のソートキー'
        required: false
        type: 'integer'
        minimum: 1
      responses:
        '200':
          description: '公開記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersArticlesPublic.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/drafts:
    get:
      description: '指定されたIDの下書き記事取得を取得'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '記事内容取得'
          schema:
            $ref: '#/definitions/ArticleContent'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      description: '下書き記事を更新'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      - name: 'article'
        in: 'body'
        description: 'article object'
        required: true
        schema:
          $ref: '#/definitions/MeArticlesDraftsCreate'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/drafts/title:
    put:
      description: '下書き記事のタイトル更新'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      - name: 'title'
        in: 'body'
        description: 'title object'
        required: true
        schema:
          $ref: '#/definitions/MeArticlesDraftsTitleUpdate'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsTitleUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/drafts/body:
    put:
      description: '下書き記事のbody更新'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      - name: 'body'
        in: 'body'
        description: 'body object'
        required: true
        schema:
          $ref: '#/definitions/MeArticlesDraftsBodyUpdate'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsBodyUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/public/title:
    put:
      description: '公開記事のタイトル更新'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      - name: 'title'
        in: 'body'
        description: 'title object'
        required: true
        schema:
          $ref: '#/definitions/MeArticlesPublicTitleUpdate'
      responses:
        '200':
          description: 'successful operation'
      security:
      - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicTitleUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/public/body:
    put:
      description: '公開記事のbody更新'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事を指定するために使用'
        required: true
        type: 'string'
      - name: 'body'
        in: 'body'
        description: 'body object'
        required: true
        schema:
          $ref: '#/definitions/MeArticlesPublicBodyUpdate'
      responses:
        '200':
          description: 'successful operation'
      security:
      - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicBodyUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/{article_id}/pv:
    post:
      description: '対象記事の閲覧をカウント'
      parameters:
      - name: 'article_id'
        in: 'path'
        description: '対象記事の指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '「閲覧」のカウント成功'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPvCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /users/{user_id}/info:
    get:
      description: '指定されたユーザーのユーザ情報を取得'
      parameters:
      - name: 'user_id'
        in: 'path'
        description: '対象ユーザを指定するために使用'
        required: true
        type: 'string'
      responses:
        '200':
          description: '対象ユーザ情報'
          schema:
            $ref: '#/definitions/UserInfo'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersInfo.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/wallet/balance:
    get:
      description: 'ログインユーザ情報を取得'
      responses:
        '200':
          description: 'ログインユーザ情報'
          schema:
           $ref: '#/definitions/MeWalletBalance'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeWalletBalance.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/wallet/distributed_tokens:
    get:
      description: 'ログインユーザのトークン付与情報を取得'
      responses:
        '200':
          description: 'ログインユーザのトークン付与情報'
          schema:
            $ref: '#/definitions/DistributedTokens'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeWalletDistributedTokensShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/wallet/tip:
    post:
      description: '投げ銭を行う'
      parameters:
        - name: 'tip'
          in: 'body'
          description: 'tip object'
          required: true
          schema:
            $ref: '#/definitions/MeWalletTip'
      responses:
        '200':
          description: '投げ銭受付結果'
          schema:
           $ref: '#/definitions/MeWalletTip'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeWalletTip.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/notifications:
    get:
      description: ログインユーザーの通知の一覧を取得
      responses:
        '200':
          description: 'ログインユーザーの通知の一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeNotificationsIndex.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/unread_notification_managers:
    get:
      description: 'ログインユーザーの通知の未読情報を取得'
      responses:
        '200':
          description: '対象ユーザの通知未読情報'
          schema:
            type: object
            properties:
              unread:
                type: boolean
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeUnreadNotificationManagersShow.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      description: 'ログインユーザーの通知の未読情報を未読に更新する'
      responses:
        '200':
          description: 'successful operation'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeUnreadNotificationManagersUpdate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/external_provider_user:
    post:
      description: 'user_idを作成'
      parameters:
      - name: 'user_id'
        in: 'body'
        description: 'user_id'
        required: true
        schema:
          $ref: '#/definitions/MeExternalProviderUserCreate'
      responses:
        '200':
          description: '作成されたuser_id'
          schema:
            type: object
            properties:
              user_id:
                type: 'string'
      security:
      - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '201'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeExternalProviderUserCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /topics:
    get:
      description: トピックの一覧を取得
      responses:
        '200':
          description: トピックの一覧
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TopicsIndex.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/users/{user_id}/fraud:
    post:
      description: '対象ユーザーに不正報告を行う'
      parameters:
      - name: 'user_id'
        in: 'path'
        description: '対象ユーザーの指定するために使用'
        required: true
        type: 'string'
      - name: 'Fraud'
        in: 'body'
        required: true
        schema:
          $ref: '#/definitions/Fraud'
      responses:
        '200':
          description: '不正報告の実施成功'
      security:
      - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeUsersFraudCreate.Arn}/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /articles/{article_id}/price:
    get:
      description: "指定されたarticle_idの記事の価格の取得"
      parameters:
        - name: "article_id"
          in: "path"
          description: "対象記事を指定するために使用"
          required: true
          type: "string"
      responses:
        "200":
          description: "記事の価格"
          schema:
            type: object
            properties:
              price:
                type: "number"
                format: "double"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-ArticlesPriceShow"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/purchased/{article_id}:
    get:
      description: '指定された article_id の有料記事情報を取得'
      parameters:
        - name: 'article_id'
          in: 'path'
          description: '対象記事の指定するために使用'
          required: true
          type: 'string'
      responses:
        '200':
          description: '有料記事内容取得'
          schema:
            $ref: '#/definitions/ArticleContent'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeArticlesPurchasedShow"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/purchased/article_ids:
    get:
      description: "ユーザーが購入した記事の記事ID一覧を取得"
      responses:
        "200":
          description: "記事IDの一覧"
          schema:
            type: object
            properties:
              article_ids:
                type: array
                items:
                  type: 'string'
                  enum:
                    - "article_id"
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeArticlesPurchasedArticleIdsIndex"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/articles/purchased:
    get:
      description: '購入した記事一覧情報を取得'
      parameters:
        - name: 'limit'
          in: 'query'
          description: '取得件数'
          required: false
          type: 'integer'
          minimum: 1
        - name: 'article_id'
          in: 'query'
          description: 'ページング処理における、現在のページの最後の記事のID'
          required: false
          type: 'string'
        - name: 'sort_key'
          in: 'query'
          description: 'ページング処理における、現在のページの最後の記事のソートキー'
          required: false
          type: 'integer'
          minimum: 1
      responses:
        '200':
          description: '購入した記事一覧'
          schema:
            type: array
            items:
              $ref: '#/definitions/ArticleInfo'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeArticlesPurchasedIndex"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/applications:
    get:
      description: '管理アプリケーションの一覧を取得する'
      responses:
        '200':
          schema:
            type: object
            properties:
              clients:
                type: array
                items:
                  $ref: '#/definitions/AuthleteClient'
              developer:
                type: string
              start:
                type: integer
              end:
                type: integer
              totalCount:
                type: integer
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeApplicationsIndex"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    post:
      description: '管理アプリケーションを作成する'
      parameters:
        - name: 'Application'
          in: 'body'
          required: true
          schema:
            $ref: '#/definitions/ApplicationCreate'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: 
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeApplicationsCreate"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/applications/{client_id}:
    get:
      description: '管理アプリケーションの詳細を取得する'
      parameters:
        - name: 'client_id'
          in: 'path'
          description: '対象アプリケーションの指定するために使用'
          required: true
          type: integer
      schema:
        $ref: '#/definitions/AuthleteClient'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeApplicationsShow"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    put:
      description: '管理アプリケーションを更新する'
      parameters:
        - name: 'client_id'
          in: 'path'
          description: '対象アプリケーションの指定するために使用'
          required: true
          type: integer
        - name: 'Application'
          in: 'body'
          required: true
          schema:
            $ref: '#/definitions/ApplicationUpdate'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: 
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeApplicationsUpdate"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    delete:
      description: '管理アプリケーションの詳細を削除する'
      parameters:
        - name: 'client_id'
          in: 'path'
          description: '対象アプリケーションの指定するために使用'
          required: true
          type: integer
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: 
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeApplicationsDelete"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
  /me/allowed_applications:
    get:
      description: '許可したoauthアプリ'
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri:
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeAllowedApplicationsIndex"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
    delete:
      description: '許可したoauthアプリを削除'
      parameters:
        - name: 'client_id'
          in: 'body'
          description: '対象アプリケーションの指定するために使用'
          required: true
          type: integer
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: 
          Fn::Join:
            - ''
            - - Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
              - Fn::ImportValue:
                  Fn::Sub: "${AlisAppId}-MeAllowedApplicationsDelete"
              - "/invocations"
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws_proxy
securityDefinitions:
  cognitoUserPool:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      type: cognito_user_pools
      providerARNs:
        - Ref: CognitoUserPoolArn
