AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda functions and API Gateway resources for the ALIS application.

Parameters:
  ArticleInfoTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleContentTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleHistoryTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleContentEditTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleEvaluatedManageTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleAlisTokenTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleLikedUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleFraudUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticlePvUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleScoreTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  UsersTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  BetaUsersTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  NotificationTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  UnreadNotificationManagerTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CommentTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CommentLikedUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  DeletedCommentTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  AlisAppDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainAwsAccessKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainAwsSecretAccessKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainExecuteApiHost:
    Type: 'AWS::SSM::Parameter::Value<String>'
  BetaModeFlag:
    Type: 'AWS::SSM::Parameter::Value<String>'
  DistS3BucketName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CognitoUserPoolArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
  SaltForArticleId:
    Type: 'AWS::SSM::Parameter::Value<String>'

Globals:
  Function:
    Runtime: python3.6
    Timeout: 300
    MemorySize: 3008
    Environment:
      Variables:
        ARTICLE_INFO_TABLE_NAME: !Ref ArticleInfoTableName
        ARTICLE_CONTENT_TABLE_NAME: !Ref ArticleContentTableName
        ARTICLE_HISTORY_TABLE_NAME: !Ref ArticleHistoryTableName
        ARTICLE_CONTENT_EDIT_TABLE_NAME: !Ref ArticleContentEditTableName
        ARTICLE_EVALUATED_MANAGE_TABLE_NAME: !Ref ArticleEvaluatedManageTableName
        ARTICLE_ALIS_TOKEN_TABLE_NAME: !Ref ArticleAlisTokenTableName
        ARTICLE_LIKED_USER_TABLE_NAME: !Ref ArticleLikedUserTableName
        ARTICLE_FRAUD_USER_TABLE_NAME: !Ref ArticleFraudUserTableName
        ARTICLE_PV_USER_TABLE_NAME: !Ref ArticlePvUserTableName
        ARTICLE_SCORE_TABLE_NAME: !Ref ArticleScoreTableName
        USERS_TABLE_NAME: !Ref UsersTableName
        BETA_USERS_TABLE_NAME: !Ref BetaUsersTableName
        NOTIFICATION_TABLE_NAME: !Ref NotificationTableName
        UNREAD_NOTIFICATION_MANAGER_TABLE_NAME: !Ref UnreadNotificationManagerTableName
        COMMENT_TABLE_NAME: !Ref CommentTableName
        COMMENT_LIKED_USER_TABLE_NAME: !Ref CommentLikedUserTableName
        DELETED_COMMENT_TABLE_NAME: !Ref DeletedCommentTableName
        DOMAIN: !Ref AlisAppDomain
        PRIVATE_CHAIN_AWS_ACCESS_KEY: !Ref PrivateChainAwsAccessKey
        PRIVATE_CHAIN_AWS_SECRET_ACCESS_KEY: !Ref PrivateChainAwsSecretAccessKey
        PRIVATE_CHAIN_EXECUTE_API_HOST: !Ref PrivateChainExecuteApiHost
        BETA_MODE_FLAG: !Ref BetaModeFlag
        DIST_S3_BUCKET_NAME: !Ref DistS3BucketName

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref "AWS::StackName"
          version: 1.0.0
        basePath: /
        schemes:
          - https
        definitions:
          ArticleInfo:
            type: object
            properties:
              article_id:
                type: string
              user_id:
                type: string
              title:
                type: string
              overview:
                type: string
              eye_catch_url:
                type: string
              created_at:
                type: integer
          ArticleContent:
            type: object
            properties:
              article_id:
                type: string
              user_id:
                type: string
              title:
                type: string
              overview:
                type: string
              eye_catch_url:
                type: string
              body:
                type: string
              created_at:
                type: integer
          MeArticlesDraftsCreate:
            type: object
            properties:
              title:
                type: string
              body:
                type: string
              eye_catch_url:
                type: string
              overview:
                type: string
          MeInfoUpdate:
            type: object
            properties:
              user_display_name:
                type: string
              self_introduction:
                type: string
          MeInfoIcon:
            type: object
            properties:
              icon_image:
                type: string
          ArticleImage:
            type: object
            properties:
              article_image:
                type: string
          UserInfo:
            type: object
            properties:
              user_id:
                type: string
              user_display_name:
                type: string
              icon_image_url:
                type: string
              self_introduction:
                type: string
          UpdateArticle:
            type: object
            properties:
              title:
                type: string
              body:
                type: string
              eye_catch_url:
                type: string
              overview:
                type: string
          MeWalletBalance:
            type: object
            properties:
              private_eth_address:
                type: string
          Notification:
            type: object
            properties:
              user_id:
                type: string
              sort_key:
                type: integer
              type:
                type: string
              acted_user_id:
                type: string
              created_at:
                type: integer
          Comment:
            type: object
            properties:
              comment_id:
                type: string
              article_id:
                type: string
              sort_key:
                type: integer
              user_id:
                type: string
              text:
                type: string
              created_at:
                type: integer
          MeArticlesFraudCreate:
            type: object
            properties:
              reason:
                type: string
              plagiarism_url:
                type: string
              plagiarism_description:
                type: string
              illegal_content:
                type: string
        paths:
          /search/articles:
            get:
              description: "記事検索"
              parameters:
              - name: "query"
                in: "query"
                description: "検索ワード"
                required: true
                type: "string"
              - name: "limit"
                in: "query"
                description: "取得件数"
                required: false
                type: "integer"
                minimum: 1
              - name: "page"
                in: "query"
                description: "ページ"
                required: false
                type: "integer"
              responses:
                "200":
                  description: "検索記事一覧"
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ArticleInfo'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ElasticSearchSearchArticles.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /search/users:
            get:
              description: "ユーザー検索"
              parameters:
              - name: "query"
                in: "query"
                description: "検索ワード"
                required: true
                type: "string"
              - name: "limit"
                in: "query"
                description: "取得件数"
                required: false
                type: "integer"
                minimum: 1
              - name: "page"
                in: "query"
                description: "ページ"
                required: false
                type: "integer"
              responses:
                "200":
                  description: "検索ユーザー一覧"
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/UserInfo'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ElasticSearchSearchUsers.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /articles/recent:
            get:
              description: "最新記事一覧情報を取得"
              parameters:
              - name: "limit"
                in: "query"
                description: "取得件数"
                required: false
                type: "integer"
                minimum: 1
              - name: "article_id"
                in: "query"
                description: "ページング処理における、現在のページの最後の記事のID"
                required: false
                type: "string"
              - name: "sort_key"
                in: "query"
                description: "ページング処理における、現在のページの最後の記事のソートキー"
                required: false
                type: "integer"
                minimum: 1
              responses:
                "200":
                  description: "最新記事一覧"
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ArticleInfo'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesRecent.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /articles/popular:
            get:
              description: '人気記事一覧情報を取得'
              parameters:
              - name: 'limit'
                in: 'query'
                description: '取得件数'
                required: false
                type: 'integer'
                minimum: 1
              - name: 'article_id'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のID'
                required: false
                type: 'string'
              - name: 'score'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のスコア数'
                required: false
                type: 'integer'
                minimum: 1
              responses:
                '200':
                  description: '人気記事一覧'
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ArticleInfo'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesPopular.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /articles/{article_id}:
            get:
              description: "指定されたarticle_idの記事情報を取得"
              parameters:
              - name: "article_id"
                in: "path"
                description: "対象記事の指定するために使用"
                required: true
                type: "string"
              responses:
                "200":
                  description: "記事内容取得"
                  schema:
                    $ref: '#/definitions/ArticleContent'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /articles/{article_id}/alistoken:
            get:
              description: "指定された article_id のALISトークン数を取得"
              parameters:
              - name: "article_id"
                in: "path"
                description: "対象記事の指定するために使用"
                required: true
                type: "string"
              responses:
                "200":
                  description: "ALISトークン数"
                  schema:
                    type: object
                    properties:
                      alistoken:
                        type: "number"
                        format: "double"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesAlisTokensShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /articles/{article_id}/likes:
            get:
              description: '指定された article_id の記事の「いいね」数を取得'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '対象記事の「いいね」数'
                  schema:
                    type: object
                    properties:
                      count:
                        type: "number"
                        format: "double"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesLikesShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /articles/{article_id}/comments:
            get:
              description: '指定された article_id の記事のコメントの一覧を取得する'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '対象記事のコメントの一覧'
                  schema:
                    $ref: '#/definitions/Comment'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesCommentsIndex.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /comments/{comment_id}/likes:
            get:
              description: '指定されたコメントに付与されているいいね数を取得する'
              parameters:
              - name: 'comment_id'
                in: 'path'
                description: '対象コメントを指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '対象記事のコメントの一覧'
                  schema:
                    type: object
                    properties:
                      count:
                        type: "number"
                        format: "double"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CommentsLikesShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/drafts:
            get:
              description: '下書き記事一覧情報を取得'
              parameters:
              - name: 'limit'
                in: 'query'
                description: '取得件数'
                required: false
                type: 'integer'
                minimum: 1
              - name: 'article_id'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のID'
                required: false
                type: 'string'
              - name: 'sort_key'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のソートキー'
                required: false
                type: 'integer'
                minimum: 1
              responses:
                '200':
                  description: '下書き記事一覧'
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ArticleInfo'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsIndex.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            post:
              description: '下書き記事を作成'
              parameters:
              - name: 'article'
                in: 'body'
                description: 'article object'
                required: true
                schema:
                  $ref: '#/definitions/MeArticlesDraftsCreate'
              responses:
                '200':
                  description: '作成された記事ID'
                  schema:
                    type: object
                    properties:
                      article_id:
                        type: 'string'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/drafts/publish:
            put:
              description: "指定された article_id の下書き記事を公開"
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: 'successful operation'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsPublish.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/public:
            get:
              description: '公開記事一覧情報を取得'
              parameters:
              - name: 'limit'
                in: 'query'
                description: '取得件数'
                required: false
                type: 'integer'
                minimum: 1
              - name: 'article_id'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のID'
                required: false
                type: 'string'
              - name: 'sort_key'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のソートキー'
                required: false
                type: 'integer'
                minimum: 1
              responses:
                '200':
                  description: '公開記事一覧'
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ArticleInfo'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicIndex.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/public:
            get:
              description: '指定された article_id の公開記事情報を取得'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '記事内容取得'
                  schema:
                    $ref: '#/definitions/ArticleContent'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            put:
              description: '指定された article_id の編集記事情報を上書き'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              - name: 'article'
                in: 'body'
                description: 'article object'
                required: true
                schema:
                  $ref: '#/definitions/UpdateArticle'
              responses:
                '200':
                  description: 'successful operation'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicUpdate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/public/edit:
            get:
              description: '指定された article_id の編集記事情報を取得'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事を指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '記事内容取得'
                  schema:
                    $ref: '#/definitions/ArticleContent'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicEdit.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/public/unpublish:
            put:
              description: '指定された article_id の公開記事を下書きに戻す'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事を指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: 'successful operation'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicUnpublish.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/public/republish:
            put:
              description: '指定された article_id の編集記事を公開する'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事を指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: 'successful operation'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPublicRepublish.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/like:
            get:
              description: '指定された article_id の記事に「いいね」を行ったかを確認'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '対象記事に「いいね」を行ったかを判定'
                  schema:
                    type: object
                    properties:
                      liked:
                        type: boolean
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesLikesShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            post:
              description: '対象記事に「いいね」を行う'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '「いいね」の実施成功'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesLikeCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/comments:
            post:
              description: '指定された article_id の記事に対してコメントを登録する'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: 'コメント登録の完了'
                  schema:
                    type: object
                    properties:
                      comment_id:
                        type: 'string'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesCommentsCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy

          /me/articles/{article_id}/comments/likes:
            get:
              description: '指定された記事のコメントの中で、自分がいいねを実行したコメントのIDの一覧を取得する'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事を指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: 'いいねを実施したコメントのIDの一覧'
                  schema:
                    type: object
                    properties:
                      comment_ids:
                        type: array
                        items:
                          type: 'string'
                          enum:
                            - "comment_id"
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesCommentsLikesIndex.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/comments/{comment_id}:
            delete:
              description: '指定されたコメントを削除する'
              parameters:
              - name: 'comment_id'
                in: 'path'
                description: '対象コメントを指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: 'コメント削除の完了'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeCommentsDelete.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/comments/{comment_id}/likes:
            post:
              description: '指定されたコメントに対していいねする'
              parameters:
              - name: 'comment_id'
                in: 'path'
                description: '対象コメントを指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: 'いいねの完了'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeCommentsLikesCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/fraud:
            post:
              description: '対象記事に不正報告を行う'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              - name: 'FraudContents'
                in: 'body'
                description: '違反報告の内容'
                schema:
                  $ref: '#/definitions/MeArticlesFraudCreate'
              responses:
                '200':
                  description: '不正報告の実施成功'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesFraudCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/images:
            post:
              description: '対象記事に画像データを登録'
              produces:
              - application/json
                application/octet-stream
              parameters:
                - name: 'content-type'
                  in: 'header'
                  required: true
                  type: 'string'
                - name: 'article_id'
                  description: '対象記事の指定するために使用'
                  in: 'path'
                  required: true
                  type: 'string'
                - in: 'body'
                  name: 'ArticleImage'
                  description: 'article image object'
                  required: true
                  schema:
                    $ref: '#/definitions/ArticleImage'
              responses:
                '200':
                  description: '登録した画像データのURL'
                  schema:
                    type: object
                    properties:
                      image_url:
                        type: 'string'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesImagesCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/info:
            get:
              description: 'ログインユーザ情報を取得'
              responses:
                '200':
                  description: 'ログインユーザ情報'
                  schema:
                    $ref: '#/definitions/UserInfo'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeInfoShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            put:
              description: 'ユーザ情報を更新'
              parameters:
              - name: 'user info'
                in: 'body'
                description: 'user info object'
                required: true
                schema:
                  $ref: '#/definitions/MeInfoUpdate'
              responses:
                '200':
                  description: 'ユーザ情報更新成功'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeInfoUpdate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/info/icon:
            post:
              description: 'ユーザアイコンを登録'
              produces:
              - application/json
                application/octet-stream
              parameters:
                - name: 'icon'
                  in: 'body'
                  description: 'icon object'
                  required: true
                  schema:
                    $ref: '#/definitions/MeInfoIcon'
              responses:
                '200':
                  description: '登録した画像データのURL'
                  schema:
                    type: object
                    properties:
                      image_url:
                        type: 'string'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeInfoIconCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /users/{user_id}/articles/public:
            get:
              description: '指定されたユーザーの公開記事一覧情報を取得'
              parameters:
              - name: 'user_id'
                in: 'path'
                description: '対象ユーザを指定するために使用'
                required: true
                type: 'string'
              - name: 'limit'
                in: 'query'
                description: '取得件数'
                required: false
                type: 'integer'
                minimum: 1
              - name: 'article_id'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のID'
                required: false
                type: 'string'
              - name: 'sort_key'
                in: 'query'
                description: 'ページング処理における、現在のページの最後の記事のソートキー'
                required: false
                type: 'integer'
                minimum: 1
              responses:
                '200':
                  description: '公開記事一覧'
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ArticleInfo'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersArticlesPublic.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/drafts:
            get:
              description: '指定されたIDの下書き記事取得を取得'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '記事内容取得'
                  schema:
                    $ref: '#/definitions/ArticleContent'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            put:
              description: '下書き記事を更新'
              parameters:
              - name: 'article'
                in: 'body'
                description: 'article object'
                required: true
                schema:
                  $ref: '#/definitions/MeArticlesDraftsCreate'
              responses:
                '200':
                  description: 'successful operation'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesDraftsUpdate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/articles/{article_id}/pv:
            post:
              description: '対象記事の閲覧をカウント'
              parameters:
              - name: 'article_id'
                in: 'path'
                description: '対象記事の指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '「閲覧」のカウント成功'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeArticlesPvCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /users/{user_id}/info:
            get:
              description: '指定されたユーザーのユーザ情報を取得'
              parameters:
              - name: 'user_id'
                in: 'path'
                description: '対象ユーザを指定するために使用'
                required: true
                type: 'string'
              responses:
                '200':
                  description: '対象ユーザ情報'
                  schema:
                    $ref: '#/definitions/UserInfo'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersInfo.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/wallet/balance:
            get:
              description: 'ログインユーザ情報を取得'
              responses:
                '200':
                  description: 'ログインユーザ情報'
                  schema:
                   $ref: '#/definitions/MeWalletBalance'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeWalletBalance.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/notifications:
            get:
              description: ログインユーザーの通知の一覧を取得
              responses:
                '200':
                  description: 'ログインユーザーの通知の一覧'
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/Notification'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeNotificationsIndex.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /me/unread_notification_managers:
            get:
              description: 'ログインユーザーの通知の未読情報を取得'
              responses:
                '200':
                  description: '対象ユーザの通知未読情報'
                  schema:
                    type: object
                    properties:
                      unread:
                        type: boolean
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeUnreadNotificationManagersShow.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            put:
              description: 'ログインユーザーの通知の未読情報を未読に更新する'
              responses:
                '200':
                  description: 'successful operation'
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MeUnreadNotificationManagersUpdate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          cognitoUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !Ref CognitoUserPoolArn
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
  ArticlesRecent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/articles_recent.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/recent
            Method: get
            RestApiId: !Ref RestApi
  ArticlesPopular:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/articles_popular.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/popular
            Method: get
            RestApiId: !Ref RestApi
  ArticlesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/articles_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}
            Method: get
            RestApiId: !Ref RestApi
  ArticlesAlisTokensShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/articles_alis_tokens_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}/alistoken
            Method: get
            RestApiId: !Ref RestApi
  ArticlesLikesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/articles_likes_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}/likes
            Method: get
            RestApiId: !Ref RestApi
  UsersArticlesPublic:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/users_articles_public.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users/{user_id}/articles/public
            Method: get
            RestApiId: !Ref RestApi
  UsersInfo:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/users_info_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users/{user_id}/info
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesDraftsIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_drafts_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/drafts
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesDraftsCreate:
      Type: AWS::Serverless::Function
      Properties:
        Handler: handler.lambda_handler
        Role: !GetAtt LambdaRole.Arn
        CodeUri: ./deploy/me_articles_drafts_create.zip
        Environment:
          Variables:
            SALT_FOR_ARTICLE_ID: !Ref SaltForArticleId
        Events:
          Api:
            Type: Api
            Properties:
              Path: /me/articles/drafts
              Method: post
              RestApiId: !Ref RestApi
  MeArticlesDraftsPublish:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_drafts_publish.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts/publish
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesDraftsUpdate:
      Type: AWS::Serverless::Function
      Properties:
        Handler: handler.lambda_handler
        Role: !GetAtt LambdaRole.Arn
        CodeUri: ./deploy/me_articles_drafts_update.zip
        Events:
          Api:
            Type: Api
            Properties:
              Path: /me/articles/{article_id}/drafts
              Method: put
              RestApiId: !Ref RestApi
  MeArticlesPublicIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_public_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/public
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesPublicShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_public_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesPublicEdit:
      Type: AWS::Serverless::Function
      Properties:
        Handler: handler.lambda_handler
        Role: !GetAtt LambdaRole.Arn
        CodeUri: ./deploy/me_articles_public_edit.zip
        Events:
          Api:
            Type: Api
            Properties:
              Path: /me/articles/{article_id}/public/edit
              Method: get
              RestApiId: !Ref RestApi
  MeArticlesPublicUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_public_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicUnpublish:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_public_unpublish.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/unpublish
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicRepublish:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_public_republish.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/republish
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesLikeCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_like_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/like
            Method: post
            RestApiId: !Ref RestApi
  ArticlesCommentsIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/articles_comments_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}/comments
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesCommentsCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_comments_create.zip
      Environment:
          Variables:
            SALT_FOR_ARTICLE_ID: !Ref SaltForArticleId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/comments
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesCommentsLikesIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_comments_likes_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/comments/likes
            Method: get
            RestApiId: !Ref RestApi
  CommentsLikesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/comments_likes_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /comments/{comment_id}/likes
            Method: get
            RestApiId: !Ref RestApi
  MeCommentsLikesCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_comments_likes_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/comments/{comment_id}/likes
            Method: post
            RestApiId: !Ref RestApi
  MeCommentsDelete:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_comments_delete.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/comments/{comment_id}
            Method: delete
            RestApiId: !Ref RestApi
  MeArticlesFraudCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_fraud_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/fraud
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesImagesCreate:
      Type: AWS::Serverless::Function
      Properties:
        Handler: handler.lambda_handler
        Role: !GetAtt LambdaRole.Arn
        CodeUri: ./deploy/me_articles_images_create.zip
        Events:
          Api:
            Type: Api
            Properties:
              Path: /me/articles/{article_id}/images
              Method: post
              RestApiId: !Ref RestApi
  MeInfoIconCreate:
      Type: AWS::Serverless::Function
      Properties:
        Handler: handler.lambda_handler
        Role: !GetAtt LambdaRole.Arn
        CodeUri: ./deploy/me_info_icon_create.zip
        Events:
          Api:
            Type: Api
            Properties:
              Path: /me/info/icon
              Method: post
              RestApiId: !Ref RestApi
  MeArticlesLikesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_like_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/like
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesDraftsShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_drafts_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesPvCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_articles_pv_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/pv
            Method: post
            RestApiId: !Ref RestApi
  MeInfoUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_info_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/info
            Method: put
            RestApiId: !Ref RestApi
  MeInfoShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_info_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/info
            Method: get
            RestApiId: !Ref RestApi
  MeWalletBalance:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_wallet_balance.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/wallet/balance
            Method: get
            RestApiId: !Ref RestApi
  MeNotificationsIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_notifications_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/notifications
            Method: get
            RestApiId: !Ref RestApi
  MeUnreadNotificationManagersShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_unread_notification_managers_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/unread_notification_managers
            Method: get
            RestApiId: !Ref RestApi
  MeUnreadNotificationManagersUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/me_unread_notification_managers_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/unread_notification_managers
            Method: put
            RestApiId: !Ref RestApi
  ElasticSearchSearchArticles:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/search_articles.zip
      Environment:
        Variables:
          ELASTIC_SEARCH_ENDPOINT: !GetAtt ElasticSearchService.DomainEndpoint
      Events:
        Api:
          Type: Api
          Properties:
            Path: /search/articles
            Method: get
            RestApiId: !Ref RestApi
  ElasticSearchSearchUsers:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ./deploy/search_users.zip
      Environment:
        Variables:
          ELASTIC_SEARCH_ENDPOINT: !GetAtt ElasticSearchService.DomainEndpoint
      Events:
        Api:
          Type: Api
          Properties:
            Path: /search/users
            Method: get
            RestApiId: !Ref RestApi
  ElasticSearchService:
    Type: "AWS::Elasticsearch::Domain"
    Properties: 
      AccessPolicies: !Join
        - ''
        - - '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Principal": { "AWS": "'
          - !GetAtt LambdaRole.Arn
          - '" }, "Action": "es:*", "Resource": "'
          - 'arn:aws:es:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':domain/'
          - !Ref "AWS::StackName"
          - '/*" } ] }'
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
      DomainName: !Ref "AWS::StackName"
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2
        VolumeSize: 20
      ElasticsearchClusterConfig:
        InstanceType: m4.large.elasticsearch
        InstanceCount: 1
        DedicatedMasterEnabled: true
        ZoneAwarenessEnabled: false
        DedicatedMasterType: m4.large.elasticsearch
        DedicatedMasterCount: 3
      ElasticsearchVersion: '6.2'
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
