AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda functions and API Gateway resources for the ALIS application.

Parameters:
  AlisAppId:
    Type: String
  ArticleInfoTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleContentTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleContentEditHistoryTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleHistoryTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleContentEditTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleEvaluatedManageTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleAlisTokenTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleLikedUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleFraudUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticlePvUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ArticleScoreTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  UsersTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  BetaUsersTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ExternalProviderUsersTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  NotificationTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  UnreadNotificationManagerTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CommentTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CommentLikedUserTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  DeletedCommentTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  UserFraudTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ScreenedArticleTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  TokenDistributionTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  UserFirstExperienceTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ElasticSearchEndpoint:
    Type: 'AWS::SSM::Parameter::Value<String>'
  TopicTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  TagTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  TipTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  SucceededTipTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  AlisAppDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainAwsAccessKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainAwsSecretAccessKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PrivateChainExecuteApiHost:
    Type: 'AWS::SSM::Parameter::Value<String>'
  BetaModeFlag:
    Type: 'AWS::SSM::Parameter::Value<String>'
  DistS3BucketName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CognitoUserPoolId:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CognitoUserPoolArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
  CognitoUserPoolAppId:
    Type: 'AWS::SSM::Parameter::Value<String>'
  SaltForArticleId:
    Type: 'AWS::SSM::Parameter::Value<String>'
  TwitterConsumerKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
  TwitterConsumerSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
  TwitterOauthCallbackUrl:
    Type: 'AWS::SSM::Parameter::Value<String>'
  LineChannelId:
    Type: 'AWS::SSM::Parameter::Value<String>'
  LineChannelSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ExternalProviderLoginCommonTempPassword:
    Type: 'AWS::SSM::Parameter::Value<String>'
  LineRedirectUri:
    Type: 'AWS::SSM::Parameter::Value<String>'
  ExternalProviderLoginMark:
    Type: 'AWS::SSM::Parameter::Value<String>'
  LoginSalt:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PaidArticlesTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  PaidStatusTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
  AuthleteApiKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
  AuthleteApiSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'

Globals:
  Function:
    Runtime: python3.6
    Timeout: 300
    MemorySize: 3008
    Environment:
      Variables:
        ARTICLE_INFO_TABLE_NAME: !Ref ArticleInfoTableName
        ARTICLE_CONTENT_TABLE_NAME: !Ref ArticleContentTableName
        ARTICLE_CONTENT_EDIT_HISTORY_TABLE_NAME: !Ref ArticleContentEditHistoryTableName
        ARTICLE_HISTORY_TABLE_NAME: !Ref ArticleHistoryTableName
        ARTICLE_CONTENT_EDIT_TABLE_NAME: !Ref ArticleContentEditTableName
        ARTICLE_EVALUATED_MANAGE_TABLE_NAME: !Ref ArticleEvaluatedManageTableName
        ARTICLE_ALIS_TOKEN_TABLE_NAME: !Ref ArticleAlisTokenTableName
        ARTICLE_LIKED_USER_TABLE_NAME: !Ref ArticleLikedUserTableName
        ARTICLE_FRAUD_USER_TABLE_NAME: !Ref ArticleFraudUserTableName
        ARTICLE_PV_USER_TABLE_NAME: !Ref ArticlePvUserTableName
        ARTICLE_SCORE_TABLE_NAME: !Ref ArticleScoreTableName
        USERS_TABLE_NAME: !Ref UsersTableName
        BETA_USERS_TABLE_NAME: !Ref BetaUsersTableName
        NOTIFICATION_TABLE_NAME: !Ref NotificationTableName
        UNREAD_NOTIFICATION_MANAGER_TABLE_NAME: !Ref UnreadNotificationManagerTableName
        COMMENT_TABLE_NAME: !Ref CommentTableName
        COMMENT_LIKED_USER_TABLE_NAME: !Ref CommentLikedUserTableName
        DELETED_COMMENT_TABLE_NAME: !Ref DeletedCommentTableName
        USER_FRAUD_TABLE_NAME: !Ref UserFraudTableName
        SCREENED_ARTICLE_TABLE_NAME: !Ref ScreenedArticleTableName
        TOKEN_DISTRIBUTION_TABLE_NAME: !Ref TokenDistributionTableName
        USER_FIRST_EXPERIENCE_TABLE_NAME: !Ref UserFirstExperienceTableName
        TOPIC_TABLE_NAME: !Ref TopicTableName
        TAG_TABLE_NAME: !Ref TagTableName
        TIP_TABLE_NAME: !Ref TipTableName
        SUCCEEDED_TIP_TABLE_NAME: !Ref SucceededTipTableName
        EXTERNAL_PROVIDER_USERS_TABLE_NAME: !Ref ExternalProviderUsersTableName
        DOMAIN: !Ref AlisAppDomain
        PRIVATE_CHAIN_AWS_ACCESS_KEY: !Ref PrivateChainAwsAccessKey
        PRIVATE_CHAIN_AWS_SECRET_ACCESS_KEY: !Ref PrivateChainAwsSecretAccessKey
        PRIVATE_CHAIN_EXECUTE_API_HOST: !Ref PrivateChainExecuteApiHost
        BETA_MODE_FLAG: !Ref BetaModeFlag
        DIST_S3_BUCKET_NAME: !Ref DistS3BucketName
        ELASTIC_SEARCH_ENDPOINT: !Ref ElasticSearchEndpoint
        PAID_ARTICLES_TABLE_NAME: !Ref PaidArticlesTableName
        PAID_STATUS_TABLE_NAME: !Ref PaidStatusTableName

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger/swagger.yaml
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/authorizer.zip
      Environment:
        Variables:
          AUTHLETE_API_KEY: !Ref AuthleteApiKey
          AUTHLETE_API_SECRET: !Ref AuthleteApiSecret
  ArticlesRecent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_recent.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/recent
            Method: get
            RestApiId: !Ref RestApi
  ArticlesPopular:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_popular.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/popular
            Method: get
            RestApiId: !Ref RestApi
  ArticlesEyecatch:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_eyecatch.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/eyecatch
            Method: get
            RestApiId: !Ref RestApi
  ArticlesRecommended:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_recommended.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/recommended
            Method: get
            RestApiId: !Ref RestApi
  ArticlesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}
            Method: get
            RestApiId: !Ref RestApi
  ArticlesAlisTokensShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_alis_tokens_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}/alistoken
            Method: get
            RestApiId: !Ref RestApi
  ArticlesLikesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_likes_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}/likes
            Method: get
            RestApiId: !Ref RestApi
  UsersArticlesPublic:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/users_articles_public.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users/{user_id}/articles/public
            Method: get
            RestApiId: !Ref RestApi
  UsersInfo:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/users_info_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users/{user_id}/info
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesDraftsIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/drafts
            Method: get
            RestApiId: !Ref RestApi
  LoginTwitter:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/login_twitter_index.zip
      Environment:
        Variables:
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          EXTERNAL_PROVIDER_LOGIN_COMMON_TEMP_PASSWORD: !Ref ExternalProviderLoginCommonTempPassword
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_USER_POOL_APP_ID: !Ref CognitoUserPoolAppId
          EXTERNAL_PROVIDER_LOGIN_MARK: !Ref ExternalProviderLoginMark
          LOGIN_SALT: !Ref LoginSalt
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login/twitter
            Method: post
            RestApiId: !Ref RestApi
  LoginTwitterAuthorizationUrl:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/login_twitter_authorization_url.zip
      Environment:
        Variables:
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          TWITTER_OAUTH_CALLBACK_URL: !Ref TwitterOauthCallbackUrl
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login/twitter/authorization_url
            Method: get
            RestApiId: !Ref RestApi
  SignUpLineAuthorizeUrl:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/sign_up_line_authorize_url.zip
      Environment:
        Variables:
          LINE_REDIRECT_URI: !Ref LineRedirectUri
          LINE_CHANNEL_ID: !Ref LineChannelId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /sign_up/line/authorization_url
            Method: get
            RestApiId: !Ref RestApi
  LoginLineAuthorizeUrl:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/login_line_authorize_url.zip
      Environment:
        Variables:
          LINE_REDIRECT_URI: !Ref LineRedirectUri
          LINE_CHANNEL_ID: !Ref LineChannelId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login/line/authorization_url
            Method: get
            RestApiId: !Ref RestApi
  LoginLineAuthorizeRequest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/login_line_authorize_request.zip
      Environment:
        Variables:
          LINE_CHANNEL_ID: !Ref LineChannelId
          LINE_CHANNEL_SECRET: !Ref LineChannelSecret
          EXTERNAL_PROVIDER_LOGIN_COMMON_TEMP_PASSWORD: !Ref ExternalProviderLoginCommonTempPassword
          LINE_REDIRECT_URI: !Ref LineRedirectUri
          EXTERNAL_PROVIDER_LOGIN_MARK: !Ref ExternalProviderLoginMark
          LOGIN_SALT: !Ref LoginSalt
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_USER_POOL_APP_ID: !Ref CognitoUserPoolAppId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login/line
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesDraftsCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_create.zip
      Environment:
        Variables:
          SALT_FOR_ARTICLE_ID: !Ref SaltForArticleId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/drafts
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesDraftsArticleIdCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_article_id_create.zip
      Environment:
        Variables:
          SALT_FOR_ARTICLE_ID: !Ref SaltForArticleId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/drafts/article_id
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesDraftsPublish:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_publish.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts/publish
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesDraftsPublishWithHeader:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_publish_with_header.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts/publish_with_header
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesDraftsUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesDraftsTitleUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_title_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts/title
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesDraftsBodyUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_body_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts/body
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/public
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesPublicShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesPublicEdit:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_edit.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/edit
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesPublicUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicTitleUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_title_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/title
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicBodyUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_body_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/body
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicUnpublish:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_unpublish.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/unpublish
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicRepublish:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_republish.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/republish
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesPublicRepublishWithHeader:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_public_republish_with_header.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/public/republish_with_header
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesLikeCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_like_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/like
            Method: post
            RestApiId: !Ref RestApi
  ArticlesCommentsIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/articles_comments_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/{article_id}/comments
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesCommentsCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_comments_create.zip
      Environment:
        Variables:
          SALT_FOR_ARTICLE_ID: !Ref SaltForArticleId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/comments
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesCommentsReply:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_comments_reply.zip
      Environment:
        Variables:
          SALT_FOR_ARTICLE_ID: !Ref SaltForArticleId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/comments/reply
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesCommentsLikesIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_comments_likes_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/comments/likes
            Method: get
            RestApiId: !Ref RestApi
  CommentsLikesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/comments_likes_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /comments/{comment_id}/likes
            Method: get
            RestApiId: !Ref RestApi
  MeCommentsLikesCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_comments_likes_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/comments/{comment_id}/likes
            Method: post
            RestApiId: !Ref RestApi
  MeCommentsDelete:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_comments_delete.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/comments/{comment_id}
            Method: delete
            RestApiId: !Ref RestApi
  MeArticlesFraudCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_fraud_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/fraud
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesImagesCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_images_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/images
            Method: post
            RestApiId: !Ref RestApi
  MeArticlesImageUploadUrlShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_image_upload_url_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/image_upload_url
            Method: get
            RestApiId: !Ref RestApi
  MeInfoIconCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_info_icon_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/info/icon
            Method: post
            RestApiId: !Ref RestApi
  MeInfoFirstExperiencesUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_info_first_experiences_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/info/first_experiences
            Method: put
            RestApiId: !Ref RestApi
  MeArticlesLikesShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_like_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/like
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesDraftsShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_drafts_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/drafts
            Method: get
            RestApiId: !Ref RestApi
  MeArticlesPvCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_articles_pv_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/articles/{article_id}/pv
            Method: post
            RestApiId: !Ref RestApi
  MeInfoUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_info_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/info
            Method: put
            RestApiId: !Ref RestApi
  MeInfoShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_info_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/info
            Method: get
            RestApiId: !Ref RestApi
  MeWalletBalance:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_wallet_balance.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/wallet/balance
            Method: get
            RestApiId: !Ref RestApi
  MeWalletDistributedTokensShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_wallet_distributed_tokens_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/wallet/distributed_tokens
            Method: get
            RestApiId: !Ref RestApi
  MeWalletTip:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_wallet_tip.zip
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/wallet/tip
            Method: post
            RestApiId: !Ref RestApi
  MeNotificationsIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_notifications_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/notifications
            Method: get
            RestApiId: !Ref RestApi
  MeUnreadNotificationManagersShow:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_unread_notification_managers_show.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/unread_notification_managers
            Method: get
            RestApiId: !Ref RestApi
  MeUnreadNotificationManagersUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_unread_notification_managers_update.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/unread_notification_managers
            Method: put
            RestApiId: !Ref RestApi
  MeExternalProviderUserCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_external_provider_user_create.zip
      Environment:
        Variables:
          EXTERNAL_PROVIDER_LOGIN_COMMON_TEMP_PASSWORD: !Ref ExternalProviderLoginCommonTempPassword
          EXTERNAL_PROVIDER_LOGIN_MARK: !Ref ExternalProviderLoginMark
          LOGIN_SALT: !Ref LoginSalt
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_USER_POOL_APP_ID: !Ref CognitoUserPoolAppId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/external_provider_user
            Method: post
            RestApiId: !Ref RestApi
  TopicsIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/topics_index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /topics
            Method: get
            RestApiId: !Ref RestApi
  CognitoTriggerPreAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/cognito_trigger_preauthentication.zip
      Environment:
        Variables:
          EXTERNAL_PROVIDER_LOGIN_MARK: !Ref ExternalProviderLoginMark
  ElasticSearchSearchArticles:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/search_articles.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /search/articles
            Method: get
            RestApiId: !Ref RestApi
  ElasticSearchSearchUsers:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/search_users.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /search/users
            Method: get
            RestApiId: !Ref RestApi
  ElasticSearchSearchTags:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/search_tags.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /search/tags
            Method: get
            RestApiId: !Ref RestApi
  MeUsersFraudCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::ImportValue:
          Fn::Sub: "${AlisAppId}-LambdaRole"
      CodeUri: ./deploy/me_users_fraud_create.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me/users/{user_id}/fraud
            Method: post
            RestApiId: !Ref RestApi
Outputs:
  Authorizer:
    Value:
      Ref: Authorizer
    Export:
      Name: !Sub "${AWS::StackName}-Authorizer"
  ArticlesRecent:
    Value:
      Ref: ArticlesRecent
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesRecent"
  ArticlesPopular:
    Value:
      Ref: ArticlesPopular
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesPopular"
  ArticlesEyecatch:
    Value:
      Ref: ArticlesEyecatch
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesEyecatch"
  ArticlesRecommended:
    Value:
      Ref: ArticlesRecommended
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesRecommended"
  ArticlesShow:
    Value:
      Ref: ArticlesShow
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesShow"
  ArticlesAlisTokensShow:
    Value:
      Ref: ArticlesAlisTokensShow
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesAlisTokensShow"
  ArticlesLikesShow:
    Value:
      Ref: ArticlesLikesShow
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesLikesShow"
  UsersArticlesPublic:
    Value:
      Ref: UsersArticlesPublic
    Export:
      Name: !Sub "${AWS::StackName}-UsersArticlesPublic"
  UsersInfo:
    Value:
      Ref: UsersInfo
    Export:
      Name: !Sub "${AWS::StackName}-UsersInfo"
  MeArticlesDraftsIndex:
    Value:
      Ref: MeArticlesDraftsIndex
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsIndex"
  MeArticlesDraftsCreate:
    Value:
      Ref: MeArticlesDraftsCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsCreate"
  MeArticlesDraftsArticleIdCreate:
    Value:
      Ref: MeArticlesDraftsArticleIdCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsArticleIdCreate"
  MeArticlesDraftsPublish:
    Value:
      Ref: MeArticlesDraftsPublish
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsPublish"
  MeArticlesDraftsPublishWithHeader:
    Value:
      Ref: MeArticlesDraftsPublishWithHeader
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsPublishWithHeader"
  MeArticlesDraftsUpdate:
    Value:
      Ref: MeArticlesDraftsUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsUpdate"
  MeArticlesDraftsTitleUpdate:
    Value:
      Ref: MeArticlesDraftsTitleUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsTitleUpdate"
  MeArticlesDraftsBodyUpdate:
    Value:
      Ref: MeArticlesDraftsBodyUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsBodyUpdate"
  MeArticlesPublicIndex:
    Value:
      Ref: MeArticlesPublicIndex
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicIndex"
  MeArticlesPublicShow:
    Value:
      Ref: MeArticlesPublicShow
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicShow"
  MeArticlesPublicEdit:
    Value:
      Ref: MeArticlesPublicEdit
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicEdit"
  MeArticlesPublicUpdate:
    Value:
      Ref: MeArticlesPublicUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicUpdate"
  MeArticlesPublicTitleUpdate:
    Value:
      Ref: MeArticlesPublicTitleUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicTitleUpdate"
  MeArticlesPublicBodyUpdate:
    Value:
      Ref: MeArticlesPublicBodyUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicBodyUpdate"
  MeArticlesPublicUnpublish:
    Value:
      Ref: MeArticlesPublicUnpublish
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicUnpublish"
  MeArticlesPublicRepublish:
    Value:
      Ref: MeArticlesPublicRepublish
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicRepublish"
  MeArticlesPublicRepublishWithHeader:
    Value:
      Ref: MeArticlesPublicRepublishWithHeader
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesPublicRepublishWithHeader"
  ArticlesCommentsIndex:
    Value:
      Ref: ArticlesCommentsIndex
    Export:
      Name: !Sub "${AWS::StackName}-ArticlesCommentsIndex"
  MeArticlesCommentsCreate:
    Value:
      Ref: MeArticlesCommentsCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesCommentsCreate"
  MeArticlesCommentsReply:
    Value:
      Ref: MeArticlesCommentsReply
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesCommentsReply"
  MeArticlesCommentsLikesIndex:
    Value:
      Ref: MeArticlesCommentsLikesIndex
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesCommentsLikesIndex"
  CommentsLikesShow:
    Value:
      Ref: CommentsLikesShow
    Export:
      Name: !Sub "${AWS::StackName}-CommentsLikesShow"
  MeCommentsLikesCreate:
    Value:
      Ref: MeCommentsLikesCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeCommentsLikesCreate"
  MeCommentsDelete:
    Value:
      Ref: MeCommentsDelete
    Export:
      Name: !Sub "${AWS::StackName}-MeCommentsDelete"
  MeArticlesFraudCreate:
    Value:
      Ref: MeArticlesFraudCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesFraudCreate"
  MeArticlesImagesCreate:
    Value:
      Ref: MeArticlesImagesCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesImagesCreate"
  MeArticlesImageUploadUrlShow:
    Value:
      Ref: MeArticlesImageUploadUrlShow
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesImageUploadUrlShow"
  MeInfoIconCreate:
    Value:
      Ref: MeInfoIconCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeInfoIconCreate"
  MeArticlesLikesShow:
    Value:
      Ref: MeArticlesLikesShow
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesLikesShow"
  MeArticlesDraftsShow:
    Value:
      Ref: MeArticlesDraftsShow
    Export:
      Name: !Sub "${AWS::StackName}-MeArticlesDraftsShow"
  MeInfoUpdate:
    Value:
      Ref: MeInfoUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeInfoUpdate"
  MeInfoShow:
    Value:
      Ref: MeInfoShow
    Export:
      Name: !Sub "${AWS::StackName}-MeInfoShow"
  MeWalletBalance:
    Value:
      Ref: MeWalletBalance
    Export:
      Name: !Sub "${AWS::StackName}-MeWalletBalance"
  MeWalletDistributedTokensShow:
    Value:
      Ref: MeWalletDistributedTokensShow
    Export:
      Name: !Sub "${AWS::StackName}-MeWalletDistributedTokensShow"
  MeNotificationsIndex:
    Value:
      Ref: MeNotificationsIndex
    Export:
      Name: !Sub "${AWS::StackName}-MeNotificationsIndex"
  MeUnreadNotificationManagersShow:
    Value:
      Ref: MeUnreadNotificationManagersShow
    Export:
      Name: !Sub "${AWS::StackName}-MeUnreadNotificationManagersShow"
  MeUnreadNotificationManagersUpdate:
    Value:
      Ref: MeUnreadNotificationManagersUpdate
    Export:
      Name: !Sub "${AWS::StackName}-MeUnreadNotificationManagersUpdate"
  MeExternalProviderUserCreate:
    Value:
      Ref: MeExternalProviderUserCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeExternalProviderUserCreate"
  TopicsIndex:
    Value:
      Ref: TopicsIndex
    Export:
      Name: !Sub "${AWS::StackName}-TopicsIndex"
  CognitoTriggerPreAuthentication:
    Value:
      Ref: CognitoTriggerPreAuthentication
    Export:
      Name: !Sub "${AWS::StackName}-CognitoTriggerPreAuthentication"
  ElasticSearchSearchArticles:
    Value:
      Ref: ElasticSearchSearchArticles
    Export:
      Name: !Sub "${AWS::StackName}-ElasticSearchSearchArticles"
  ElasticSearchSearchUsers:
    Value:
      Ref: ElasticSearchSearchUsers
    Export:
      Name: !Sub "${AWS::StackName}-ElasticSearchSearchUsers"
  ElasticSearchSearchTags:
    Value:
      Ref: ElasticSearchSearchTags
    Export:
      Name: !Sub "${AWS::StackName}-ElasticSearchSearchTags"
  MeUsersFraudCreate:
    Value:
      Ref: MeUsersFraudCreate
    Export:
      Name: !Sub "${AWS::StackName}-MeUsersFraudCreate"
